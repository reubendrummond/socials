generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  username      String?    @unique
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  registeredAt  DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  role          Role       @default(USER)
  posts         Post[]     @relation("userPosts")
  comments      Comment[]  @relation("userComments")
  reactions     Reaction[] @relation("userReactions")
  repliesTo     Comment[]  @relation("repliesTo")
  accounts      Account[]
  sessions      Session[]
}

model Post {
  id        Int        @id @default(autoincrement())
  title     String?
  body      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  reactions Reaction[] @relation("postReactions")
  comments  Comment[]  @relation("postComments")
  user      User       @relation(name: "userPosts", fields: [userId], references: [id])
}

model Reaction {
  id     Int       @id @default(autoincrement())
  type   Reactions @default(LIKE)
  postId Int
  userId String
  user   User      @relation(name: "userReactions", fields: [userId], references: [id])
  post   Post      @relation(name: "postReactions", fields: [postId], references: [id])
}

model Comment {
  id          Int       @id @default(autoincrement())
  body        String
  userId      String
  postId      Int
  replyId     Int?
  replyUserId String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(name: "userComments", fields: [userId], references: [id])
  post        Post      @relation(name: "postComments", fields: [postId], references: [id])
  reply       Comment?  @relation("commentReplies", fields: [replyId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  replyTo     User?     @relation("repliesTo", fields: [replyUserId], references: [id])
  replies     Comment[] @relation("commentReplies")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Reactions {
  LIKE
  ANGRY
  LOL
}
